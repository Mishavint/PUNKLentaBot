import logging
from config import TOKEN

from telegram import *
from telegram.ext import *

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


### Texts ###
def text_for_start(name):
    return f"""
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}. –Ø —á–∞—Ç-–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π –≤ –ª–µ–Ω—Ç–µ. –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ü—É–Ω–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ü—É–Ω–∫–∞

–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ MVP(Minimal Viable Product). –¢–∞–∫ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–æ 2 –∫–æ–º–∞–Ω–¥—ã:

/find_in_lenta - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –õ–µ–Ω—Ç–µ –∏ –≥–æ—Ç–æ–≤—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç—ã
/find_in_punk - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –ü—É–Ω–∫–µ, –µ—Å–ª–∏ –≤—ã —Å–µ–π—á–∞—Å –≤ –õ–µ–Ω—Ç–µ
/clear - –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –≤–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

–ë—É–¥—å—Ç–µ –ª—é–¥—å–º–∏, –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üêí
"""


def text_for_help():
    return """
–ë–æ—Ç —Å–æ–∑–¥–∞–Ω @mishavint. –°–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –ø–∏—Å–∞—Ç—å –µ–º—É (–£–º–æ–ª—è—é –Ω–µ –Ω–æ—á—å—é).    

–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ MVP(Minimal Viable Product). –¢–∞–∫ —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–≥–æ 2 –∫–æ–º–∞–Ω–¥—ã:
/find_in_lenta - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –õ–µ–Ω—Ç–µ –∏ –≥–æ—Ç–æ–≤—ã –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç—ã
/find_in_punk - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –ü—É–Ω–∫–µ, –µ—Å–ª–∏ –≤—ã —Å–µ–π—á–∞—Å –≤ –õ–µ–Ω—Ç–µ
/clear - –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –≤–∞—Å —É–¥–∞–ª–∏–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

–ë—É–¥—å—Ç–µ –ª—é–¥—å–º–∏, –∑–∞—Ä–∞–Ω–µ–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ—Å—å –ø—Ä–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üêí
"""


######### start help commands #########
def start_command(update: Update, context: CallbackContext):
    name = update.message.chat.first_name
    update.message.reply_text(text_for_start(name))


def help_command(update, context):
    update.message.reply_text(text_for_help())


######### find people commands #########
list_for_finders = list()
list_for_couriers = list()


def find_in_lenta(update: Update, context: CallbackContext):
    if is_in_lists(update.message.chat, update):
        return

    try:
        courier = list_for_couriers.pop(0)
        update.message.reply_text(f"–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å: @{courier[0]}")
        context.bot.send_message(chat_id=courier[1],
                                 text=f"–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ–º–æ—â—å: @{update.message.chat.username}")
    except IndexError:
        list_for_finders.append((update.message.chat.username, update.message.chat.id))
        update.message.reply_text(
            f"–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º –Ω–∏–∫–æ–≥–æ –≤ –õ–µ–Ω—Ç–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å: "
            f"{list_for_finders.index((update.message.chat.username, update.message.chat_id)) + 1}")


def find_in_punk(update: Update, context: CallbackContext):
    if is_in_lists(update.message.chat, update):
        return

    try:
        finder = list_for_finders.pop(0)
        update.message.reply_text(f"–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ–º–æ—â—å: @{finder[0]}")
        context.bot.send_message(chat_id=finder[1],
                                 text=f"–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å: @{update.message.chat.username}")
    except IndexError:
        list_for_couriers.append((update.message.chat.username, update.message.chat.id))
        update.message.reply_text(
            f"–ù–∏–∫—Ç–æ –Ω–µ –∏—â—ë—Ç —á–µ–ª–æ–≤–µ–∫–∞ –≤ –ª–µ–Ω—Ç–µ. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å. –í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å:"
            f" {list_for_couriers.index((update.message.chat.username, update.message.chat.id)) + 1}")


def remove_from_list(update: Update, context: CallbackContext):
    try:
        list_for_finders.remove((update.message.chat.username, update.message.chat.id))
        update.message.reply_text("–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –∫—É—Ä—å–µ—Ä–∞")
        return
    except ValueError:
        try:
            list_for_couriers.remove((update.message.chat.username, update.message.chat.id))
            update.message.reply_text("–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –≤ –ª–µ–Ω—Ç–µ")
            return
        except ValueError:
            update.message.reply_text("–í–∞—Å –Ω–µ—Ç –Ω–∏ –≤ –∫–∞–∫–æ–π –æ—á–µ—Ä–µ–¥–∏")


def menu(upadte: Update, context: CallbackContext):
    buttons = [
        [KeyboardButton("–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—åüõí", callback_data="/start"),
         KeyboardButton("–ò—â—É –ø–æ–º–æ—â—åüè¨", callvack_data=help_command)]
    ]
    upadte.message.reply_text(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))


def button(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer()

    query.edit_message_text(text=f"Selected option: {query.data}")


######### util #########
def unknown_command(update: Update, context: CallbackContext):
    update.message.reply_text("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç :-(")


def message(update: Update, context: CallbackContext):
    if "–≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—åüõí" in update.message.text.lower():
        find_in_punk(update, context)
    elif "–∏—â—É –ø–æ–º–æ—â—åüè¨" in update.message.text.lower():
        find_in_lenta(update, context)
    else:
        update.message.reply_text("–ù–µ –º–æ–≥—É —Ç–∞–∫–æ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å :-(")


def is_in_lists(chat, update: Update):
    if list_for_finders.__contains__((chat.username, chat.id)):
        update.message.reply_text("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞ –ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–∞")
        return True
    if list_for_couriers.__contains__((chat.username, chat.id)):
        update.message.reply_text("–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∫—É—Ä—å–µ—Ä–æ–≤")
        return True
    return False


######### main #########
def main():
    updater = Updater(TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("find_in_lenta", find_in_lenta))
    dispatcher.add_handler(CommandHandler("find_in_punk", find_in_punk))
    dispatcher.add_handler(CommandHandler("clear", remove_from_list))
    dispatcher.add_handler(CommandHandler("menu", menu))
    dispatcher.add_handler(CallbackQueryHandler(button))

    dispatcher.add_handler(MessageHandler(~Filters.command, message))
    dispatcher.add_handler(MessageHandler(Filters.command, unknown_command))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
